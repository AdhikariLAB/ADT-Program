

###################################################################################################################################################
#This user-manual is written by Soumya Mukherjee, Bijit Mukherjee, Saikat Mukherjee, Subhankar Sardar and Satrajit Adhikari (corresponding author)
###################################################################################################################################################

                                                ************************************************************ 
                                                #        INSTRUCTIONS TO THE USERS OF 'ADT' PROGRAM        #
                                                ************************************************************

Enter into the 'ADT' folder (containing 'ADT1', 'ADT2', 'INPUT','RESULT','LICENSE','README','USER_MANUAL' and 'Interface.sh') and perform 
the following jobs successively.                                                                                                     

****************************************
STEP I (ONLY FOR NUMERICAL CALCULATIONS)
****************************************

Remove previous input files, if exist, from the 'INPUT' folder and import/prepare the new ones containing adiabatic energies and nonadiabatic 
coupling terms (NACTs). Instructions related to the input files are provided under the section 'INSTRUCTIONS RELATED TO THE INPUT FILES'.

******************************************************************
STEP II (BOTH FOR ANALYTIC EXPRESSIONS AND NUMERICAL CALCULATIONS)
******************************************************************

Run the following command in the linux terminal.

"./Interface.sh 'first argument' 'second argument' 'third argument' 'fourth argument' 'fifth argument' 'sixth argument' 'seventh argument' "

User has to supply appropriate numbers for the above-mentioned seven arguments according to his/her requirement.

(a) First Argument:

    It corresponds to the type of the job. The following table is necessary in this regard.

    ------------------------------------------------------------------------------------------
            first argument                                 type of job
    ------------------------------------------------------------------------------------------

                  1                                    analytic derivation
 
                  2                                    numerical calculation 

    ------------------------------------------------------------------------------------------

(b) Second Argument:

    It corresponds to number of electronic states in the sub-Hilbert space. Supply that number as 'second argument'.

(c) Third Argument:

    It corresponds to a specific output obtained from the analytic derivation. 
    (Not useful if 'first argument' is 2)

    ------------------------------------------------------------------------------------------------------------
            third argument                                     output      
    ------------------------------------------------------------------------------------------------------------
                   
                  1                               adiabatic potential energy matrix

                  2                               nonadiabatic coupling matrix (NACM)

                  3                               adiabatic to diabatic transformation (ADT) matrix

                  4                               partially substituted forms of ADT equations (see the article for explanation) 

                  5                               complete form of ADT equations (see the article for explanation)

                  6                               expression of coefficients of gradient of ADT angles (see the article for explanation)

                  7                               functional form of coefficients of NACTs (see the article for explanation)

                  8                               diabatic potential energy matrix

      any arbitrary number/string                 if 'first argument' is 2

    ------------------------------------------------------------------------------------------------------------
    
(d) Fourth Argument:

    It corresponds to number of grid points for the first coordinate in the numerical calculation. 
    (Supply any arbitrary number/string if 'first argument' is 1.)

(e) Fifth Argument:

    It corresponds to number of grid points for the second coordinate in the numerical calculation. 
    (Supply any arbitrary number/string if 'first argument' is 1.)
   
(f) Sixth Argument:

    It corresponds to the path of integration in the numerical calculation.
    (Not useful if 'first argument' is 1.)

    ------------------------------------------------------------------------------------------------------------
            sixth argument                     path of integration (R : first coordinate, P : second coordinate)     
    ------------------------------------------------------------------------------------------------------------
                   
                  1                               1. Intially, along each positive step of P grid at lowest R.
                                                  2. Then along each positive increment of R for each P grid.
                                                                                                              
                  2                               1. Intially, along each negative step of P grid at lowest R.
                                                  2. Then along each positive increment of R for each P grid.
                                                                                                              
                  3                               1. Intially, along each positive step of P grid at highest R.
                                                  2. Then along each negative increment of R for each P grid.
                                                                                                              
                  4                               1. Intially, along each negative step of P grid at highest R. 
                                                  2. Then along each negative increment of R for each P grid.
                                                                                                              
                  5                               1. Intially, along each positive step of R grid at lowest P.
                                                  2. Then along each positive increment of P for each R grid.
                                                                                                              
                  6                               1. Intially, along each negative step of R grid at lowest P.
                                                  2. Then along each positive increment of P for each R grid.
                                                                                                              
                  7                               1. Intially, along each positive step of R grid at highest P. 
                                                  2. Then along each negative increment of P for each R grid.
                                                                                                              
                  8                               1. Intially, along each negative step of R grid at highest P.
                                                  2. Then along each negative increment of P for each R grid.

     any arbitrary number/string                  if 'first argument' is 1

    ------------------------------------------------------------------------------------------------------------

(g) Seventh Argument :

    It corresponds to the fortran compiler options for numerical calculation. The following table is necessary in this regard.
    (Not useful if 'first argument' is 1.)

    ------------------------------------------------------------------------------------------
            seventh argument                              fortran compiler
    ------------------------------------------------------------------------------------------

                  1                                            ifort
 
                  2                                          gfortran

      any arbitrary number/string                       if 'first argument' is 1      

    ------------------------------------------------------------------------------------------

    
*******************************************************************
STEP III (BOTH FOR ANALYTIC EXPRESSIONS AND NUMERICAL CALCULATIONS)
*******************************************************************

Collect the output result files (with '.DAT' extension) and information file ('INFORMATION.DAT' : carries a brief description of the result files) 
from the newly generated 'RESULT' folder.



               **************************************************************************************************
               #                            INSTRUCTIONS RELATED TO THE INPUT FILES                             #
               **************************************************************************************************


(I)   Each input file contains three columns : grid of first coordinate, grid of second coordinate and adiabatic energy/NACT (at 
      every grid point). A blank line has to be incorporated after a set of data points corresponding to fixed magnitude of first 
      coordinate, but different values of second coordinate.

      Example : The format of an energy input file is :

      -----------------------------------------------------------------------------------------
         first coordinate           second coordinate            adiabatic energy # This line is only for understanding of user, absent in input files
      -----------------------------------------------------------------------------------------

       ----------------------------------------------------------------------------------------               
       !     0.1                           0.2                       -273.54                  !
       !     0.1                           0.4                       -273.78                  !
       !     0.1                           0.6                       -273.24                  !
       !                                                                <------- blank line   !
       !     0.2                           0.2                       -273.12                  !
       !     0.2                           0.4                       -272.32                  !
       !     0.2                           0.6                       -272.09                  !
       !                                                                <------- blank line   !
       ----------------------------------------------------------------------------------------               

 
(II)  Ab initio calculations/numerical diabatization (ADT) is carried out along a two-dimensional grid of geometries. In order to visualize 
      quantization of NACTs and to evaluate residue of ADT angles, one of the coordinate must be bound (which can form closed path in a 
      nuclear configuration space) and that is considered as second coordinate.

      Example : 

         (1) For Cartesian coordinates ('x' and 'y') or normal mode coordinates ('Q_{i}' and 'Q_{j}'), they must be transformed into their polar
             analogue ('\rho' and '\phi') and place the second one ('\phi') as second coordinate.

         (2) For hyperspherical coordinate system, do the calculation along either '\rho' and '\phi', or '\theta' and '\phi', where '\phi' is able to 
             form a close contour. As before, '\phi' is the second coordinate.

         (3) For Jacobi coordinate system, choose a point in the nuclear configuration space for a fixed diatomic bond length ('\vec(r)'), distance 
             between diatomic center of mass and third atom ('\vec(R)'), and angle between '\vec(r)' and '\vec(R)' ('\gamma'). Then construct 
             several circular contours choosing the point as a center. Finally, the nuclear plane can be generated by varying the radius ('q') 
             and angle ('\phi') of the circular contour, where the second one acts as the  second coordinate according to our algorithm.     

 
(III) There are 'N' numbers of adiabatic potential energy files, namely, ADIABATICPES_$C.DAT (where C = 1,2,3,......,N-1,N) for 
      N number of electronic states. 

      Example : For three dimensional sub-Hilbert space, three input files, ADIABATICPES_1.DAT, ADIABATICPES_2.DAT and ADIABATICPES_3.DAT 
                contain adiabatic energies for ground, first and second excited electronic states respectively.

      [N.B. : User may provide scaled adiabatic energies (scaled with respect to ground state energy at equilibrium configuration).] 


(IV)  There are two sets of NACT files corresponding to two components of nonadiabatic coupling along the specified coordinates.
      Each set contains N*(N-1)/2 number of files, namely, TAUR_$C.DAT and TAUP_$C.DAT (where C = 1,2,3,..........., (N*(N-1)/2)-1, N*(N-1)/2).
      ['TAUR' and 'TAUP' files contain components of NACT along first and second coordinate respectively.] 

      Example : For four dimensional sub-Hilbert space, twelve input files are TAUR_1.DAT, TAUR_2.DAT, TAUR_3.DAT, TAUR_4.DAT,
                TAUR_5.DAT, TAUR_6.DAT, TAUP_1.DAT, TAUP_2.DAT, TAUP_3.DAT, TAUP_4.DAT, TAUP_5.DAT and TAUP_6.DAT.


(V)   NACT components can be presented as 'TAUR_(x,y)' or 'TAUP_(x,y)' where x < y and they denote the electronic levels involved in 
      the said nonadiabatic coupling. Initially, they are arranged in increasing order of the second index and then in increasing 
      order of the first index keeping the second index fixed. Finally they are written in the above files according to their order of
      appearance.
 
      Example : For four dimensional sub-Hilbert space, six TAURs are TAUR_(1,2), TAUR_(2,3), TAUR_(1,4), TAUR_(3,4), TAUR_(1,3) 
                and TAUR_(2,4). 

                According to the above scheme, these can be arranged as TAUR_(1,2), TAUR_(1,3), TAUR_(2,3), TAUR_(1,4), TAUR_(2,4) 
                and TAUR_(3,4). 

                So TAUR_1.DAT, TAUR_2.DAT, TAUR_3.DAT, TAUR_4.DAT, TAUR_5.DAT and TAUR_6.DAT contain the magitude of
                TAUR_(1,2), TAUR_(1,3), TAUR_(2,3), TAUR_(1,4), TAUR_(2,4) and TAUR_(3,4) at every grid point, respectively. 
                Similar scheme can be adopted for TAUPs also.


(VI)  The difference between two grid points of a specific coordinate must be less than one. The grid points for a particular
      coordinate must be equispaced.             



                                                  **************************************
                                                                 EXAMPLES                                         
                                                  **************************************


EXAMPLE 1:
----------

Requirements :  Analytic expressions of ADT matrix elements for a three state sub-Hilbert space.

First Argument : 1
Second Argument : 3
Third Argument : 3
Fourth Argument : any arbitrary number/string (say 0)
Fifth Argument : any arbitrary number/string (say 3)
Sixth Argument : any arbitrary number/string (say 'john')
Seventh Argument : any arbitrary number/string (say 0.25)

So run the following command in the terminal:

./Interface.sh 1 3 3 0 3 john 0.25

Collect the output files from 'RESULT' folder.


EXAMPLE 2:
----------

Requirements :  Analytic expressions of complete form of ADT equations for a seven state sub-Hilbert space.

First Argument : 1
Second Argument : 7
Third Argument : 5
Fourth Argument : any arbitrary number/string (say 2)
Fifth Argument : any arbitrary number/string (say 11)
Sixth Argument : any arbitrary number/string (say 9.902)
Seventh Argument : any arbitrary number/string (say 'cat')

So run the following command in the terminal:

./Interface.sh 1 7 5 2 11 9.902 cat

Collect the output files from 'RESULT' folder.


EXAMPLE 3:
----------

Requirements :  Numerical calculation for a six state sub-Hilbert space along polar analogues of a pair of normal modes ('Q_{i}' and 'Q_{j}')
                Grid points of first coordinate ('\rho') : 50
                Grid points of second coordinate ('\phi') : 180
                Integration path : Intially, along each positive step of '\phi' grid at highest '\rho' and then along each 
                                   negative increment of '\rho' for each '\phi' grid
                Fortran compiler : ifort

First place the following files (each has three columns) in the 'INPUT' folder.

------------------------------------------------------------------------------------------------------------
        filename            first column data         second column data          third column data
------------------------------------------------------------------------------------------------------------

     ADIABATICPES_1.DAT    rid values of '\rho'      grid values of '\phi'         ground state energy
     ADIABATICPES_2.DAT            do                        do                first excited state energy
     ADIABATICPES_3.DAT            do                        do                second excited state energy
     ADIABATICPES_4.DAT            do                        do                third excited state energy
     ADIABATICPES_5.DAT            do                        do                fourth excited state energy
     ADIABATICPES_6.DAT            do                        do                fifth excited state energy
         TAUR_1.DAT                do                        do                     TAUR_(1,2)
         TAUR_2.DAT                do                        do                     TAUR_(1,3)
         TAUR_3.DAT                do                        do                     TAUR_(2,3)
         TAUR_4.DAT                do                        do                     TAUR_(1,4)
         TAUR_5.DAT                do                        do                     TAUR_(2,4)
         TAUR_6.DAT                do                        do                     TAUR_(3,4)
         TAUR_7.DAT                do                        do                     TAUR_(1,5)
         TAUR_8.DAT                do                        do                     TAUR_(2,5)
         TAUR_9.DAT                do                        do                     TAUR_(3,5)
         TAUR_10.DAT               do                        do                     TAUR_(4,5)
         TAUR_11.DAT               do                        do                     TAUR_(1,6)
         TAUR_12.DAT               do                        do                     TAUR_(2,6)
         TAUR_13.DAT               do                        do                     TAUR_(3,6)
         TAUR_14.DAT               do                        do                     TAUR_(4,6)
         TAUR_15.DAT               do                        do                     TAUR_(5,6)
         TAUP_1.DAT                do                        do                     TAUP_(1,2)
         TAUP_2.DAT                do                        do                     TAUP_(1,3)
         TAUP_3.DAT                do                        do                     TAUP_(2,3)
         TAUP_4.DAT                do                        do                     TAUP_(1,4)
         TAUP_5.DAT                do                        do                     TAUP_(2,4)
         TAUP_6.DAT                do                        do                     TAUP_(3,4)
         TAUP_7.DAT                do                        do                     TAUP_(1,5)
         TAUP_8.DAT                do                        do                     TAUP_(2,5)
         TAUP_9.DAT                do                        do                     TAUP_(3,5)
         TAUP_10.DAT               do                        do                     TAUP_(4,5)
         TAUP_11.DAT               do                        do                     TAUP_(1,6)
         TAUP_12.DAT               do                        do                     TAUP_(2,6)
         TAUP_13.DAT               do                        do                     TAUP_(3,6)
         TAUP_14.DAT               do                        do                     TAUP_(4,6)
         TAUP_15.DAT               do                        do                     TAUP_(5,6)
         
------------------------------------------------------------------------------------------------------------

First Argument : 2
Second Argument : 6
Third Argument : any arbitrary number/string (say -2)
Fourth Argument : 50
Fifth Argument : 180
Sixth Argument : 3
Seventh Argument : 1

Then run the following command in the terminal:

./Interface.sh 2 6 -2 50 180 3 1

Collect the output files from 'RESULT' folder.


EXAMPLE 4:
----------

Requirements :  Numerical calculation for a four state sub-Hilbert space along '\theta' and '\phi' of hyperspherical coordinates.
                Grid points of first coordinate ('\theta') : 1000
                Grid points of second coordinate ('\phi') : 2000
                Integration path : Intially, along each positive step of '\theta' grid at highest '\phi' and then along each 
                                   negative increment of '\phi' for each '\theta' grid
                Fortran compiler : gfortran

First place the following files (each has three columns) in the 'INPUT' folder.

------------------------------------------------------------------------------------------------------------
        filename            first column data         second column data          third column data
------------------------------------------------------------------------------------------------------------

     ADIABATICPES_1.DAT  grid values of '\theta'      grid values of '\phi'       ground state energy
     ADIABATICPES_2.DAT            do                        do                first excited state energy
     ADIABATICPES_3.DAT            do                        do                second excited state energy
     ADIABATICPES_4.DAT            do                        do                third excited state energy
         TAUR_1.DAT                do                        do                     TAUR_(1,2)
         TAUR_2.DAT                do                        do                     TAUR_(1,3)
         TAUR_3.DAT                do                        do                     TAUR_(2,3)
         TAUR_4.DAT                do                        do                     TAUR_(1,4)
         TAUR_5.DAT                do                        do                     TAUR_(2,4)
         TAUR_6.DAT                do                        do                     TAUR_(3,4)
         TAUP_1.DAT                do                        do                     TAUP_(1,2)
         TAUP_2.DAT                do                        do                     TAUP_(1,3)
         TAUP_3.DAT                do                        do                     TAUP_(2,3)
         TAUP_4.DAT                do                        do                     TAUP_(1,4)
         TAUP_5.DAT                do                        do                     TAUP_(2,4)
         TAUP_6.DAT                do                        do                     TAUP_(3,4)
         
------------------------------------------------------------------------------------------------------------

First Argument : 2
Second Argument : 4
Third Argument : any arbitrary number/string (say 'tom')
Fourth Argument : 1000
Fifth Argument : 2000
Sixth Argument : 7
Seventh Argument : 2

Then run the following command in the terminal:

./Interface.sh 2 4 tom 1000 2000 7 2

Collect the output files from 'RESULT' folder.



                                                  **************************************
                                                                TRIAL RUNS                                         
                                                  **************************************

User can perform some trial calculations employing the input data present in the 'TEST_RUNS' folder. 


 
-----------------------
ANALYTIC FORMULATIONS :
-----------------------

-----------------------------------------------------------------------
EXAMPLE 1 : ADT equations for a two electronic state sub-Hilbert space
-----------------------------------------------------------------------

Run the following command in 'ADT' folder:

./Interface.sh 1 2 5 0 0 0 0

Then compare the output files present in 'RESULT' and 'TEST_RUNS/ANALYTIC_EXPRESSIONS/TWO_STATE/RESULT' directory.

-----------------------------------------------------------------------------------------------------
EXAMPLE 2 : diabatic potential energy matrix elements for a three electronic state sub-Hilbert space 
-----------------------------------------------------------------------------------------------------

Run the following command in 'ADT' folder:

./Interface.sh 1 3 8 0 0 0 0

Then compare the output files present in 'RESULT' and 'TEST_RUNS/ANALYTIC_EXPRESSIONS/THREE_STATE/RESULT' directory.

-----------------------------------------------------------------------------------------------------------------------------------------
EXAMPLE 3 : coefficient matrix of gradient of ADT angles (Eq. 13, described in the article) for a six electronic state sub-Hilbert space 
-----------------------------------------------------------------------------------------------------------------------------------------

Run the following command in 'ADT' folder:

./Interface.sh 1 6 6 0 0 0 0

Then compare the output files present in 'RESULT' and 'TEST_RUNS/ANALYTIC_EXPRESSIONS/SIX_STATE/RESULT' directory.

--------------------------------------------------------------------------------------------------------------------------
EXAMPLE 4 : coefficient matrix of NACTs (Eq. 13, described in the article) for a eight electronic state sub-Hilbert space 
--------------------------------------------------------------------------------------------------------------------------

Run the following command in 'ADT' folder:

./Interface.sh 1 8 7 0 0 0 0

Then compare the output files present in 'RESULT' and 'TEST_RUNS/ANALYTIC_EXPRESSIONS/EIGHT_STATE/RESULT' directory.



------------------------
NUMERICAL CALCULATIONS :
------------------------

-----------------------------
EXAMPLE 1 : NO$_{2}$ Radical 
-----------------------------

Run the following commands in 'ADT' folder:

cd INPUT
rm -rf *
cp ../TEST_RUNS/NUMERICAL_CALCULATIONS/NO2/INPUT/* .
cd ../ 
./Interface.sh 2 2 0 128 128 1 1

Then compare the output files present in 'RESULT' and 'TEST_RUNS/NUMERICAL_CALCULATIONS/NO2/RESULT' directory.

-------------------------------
EXAMPLE 2 : H$_{3}^{+}$ Cation 
-------------------------------

Run the following commands in 'ADT' folder:

cd INPUT
rm -rf *
cp ../TEST_RUNS/NUMERICAL_CALCULATIONS/H3+/INPUT/* .
cd ../ 
./Interface.sh 2 3 0 89 180 1 1

Then compare the output files present in 'RESULT' and 'TEST_RUNS/NUMERICAL_CALCULATIONS/H3+/RESULT' directory.

-----------------------------
EXAMPLE 3 : NO$_{3}$ Radical 
-----------------------------

Run the following commands in 'ADT' folder:

cd INPUT
rm -rf *
cp ../TEST_RUNS/NUMERICAL_CALCULATIONS/NO3/INPUT/* .
cd ../ 
./Interface.sh 2 5 0 50 180 6 1

Then compare the output files present in 'RESULT' and 'TEST_RUNS/NUMERICAL_CALCULATIONS/NO3/RESULT' directory.

-----------------------------------------------------
EXAMPLE 4 : C$_{6}$H$_{3}$F$_{3}^{+}$ Radical Cation
-----------------------------------------------------

Run the following commands in 'ADT' folder:

cd INPUT
rm -rf *
cp ../TEST_RUNS/NUMERICAL_CALCULATIONS/C6H3F3+/INPUT/* .
cd ../ 
./Interface.sh 2 6 0 48 180 6 1

Then compare the output files present in 'RESULT' and 'TEST_RUNS/NUMERICAL_CALCULATIONS/C6H3F3+/RESULT' directory.



***************************************************************** END ****************************************************************************
